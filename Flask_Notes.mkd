# Flask
GET/POST
	* python def
	* database
		+ SQL
		+ cache
# Ajax
GET/POST
	* js func

# Django/Flask

## 1. MVT
M(model):	DataBase
V(view):	url control
T(template):html	

## 1.1 M

```python
class database
db=SQLAlchemy(database)
def func(db.Model)
```


### 1.1.1 Cache

* Django
CACHE
```c
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://username:password@127.0.0.1:6379',
    }
}
```

* Flask
pip install flask-caching
#### 1.1.1.1 Caching View funcs
```python
@app.route("/")
@cache.cached(timeout=50)
def index():
    return render_template('index.html')
```
#### 1.1.1.2 Caching templates

#### 1.1.1.3 Caching explicit data

### 1.1.2 Cookies and Session

`python -c 'import secrets; print(secrets.token_hex())'`
## 1.2 V
### 1.2.1 urlconf/router
route(Flask)
```python
@app.route('/index.html')
def func()

@app.route('/index.html/<int:post_id>', 
			methods=['GET','POST'])
def show_post(post_id):
    # show the post with the given id, the id is an integer
    return f'Post {post_id}')
```

urlconf(Django)
```python
urlpatterns = [
    path('articles/2003/', views.special_case_2003),
    re_path(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive),
    re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.month_archive),
    re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\w-]+)/$', views.article_detail),
]

urlpatterns = [
    path('blog/', views.page),
    path('blog/page<int:num>/', views.page),
]

# View (in blog/views.py)
def page(request, num=1):
    # Output the appropriate page of blog entries, according to num.
    ...
```

### 1.2.2 funcs



```python
# Django
def func(request, num):
	return HttpResponse(html)
	return redirect(url_for('index.html'))
	return render(render_template)
# Flask no request
```

## 1.3 T

* Django
* Jinja(Flask)

```html5
{{ variable }}
{% tag %}
```
### 1.3.1 Ajax/jQuery


## 2. 变量取值方法
### 2.1 front -> back (POST-> SQL search)
```python
if require.method == "POST":
    text = request.form.get("tag_name")
```

### 2.2 front -> back (POST -> cache Redis)

### 2.3 front (Ajax)



## 3. Structure management

### 3.1 blueprint

### 3.2 manage

### 3.3 init files